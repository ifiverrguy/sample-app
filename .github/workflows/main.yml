name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Install Chromium
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser

    - name: Run unit tests
      run: npm test:unit


    - name: Build Docker image
      run: docker build -t myapp:${{ github.sha }} .

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push image to Amazon ECR
      run: |
        docker tag myapp:${{ github.sha }} ${{ secrets.AWS_ECR_REGISTRY }}:latest
        docker push ${{ secrets.AWS_ECR_REGISTRY }}:latest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EC2
      run: |
        # Assuming you have a deployment script or AWS CodeDeploy setup
        # For example, using a simple SSH command to pull the Docker image and run it
        ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} "
          docker pull ${{ secrets.AWS_ECR_REGISTRY }}:latest &&
          docker stop myapp || true &&
          docker run -d --name myapp -p 80:3000 ${{ secrets.AWS_ECR_REGISTRY }}:latest
        "

  ui-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install Node.js (for UI tests)
      uses: actions/setup-node@v1
      with:
        node-version: '16'

    - name: Install dependencies (for UI tests)
      run: npm install

    - name: Run UI tests
      run: npm run test:ui